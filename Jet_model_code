import numpy as np
import numba
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import matplotlib.cm as cm
import matplotlib.colors as mcolors
import scipy.integrate as int
from scipy.interpolate import interp1d
from scipy.optimize import curve_fit
from pydl.pydlutils.cooling import read_ds_cooling


matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'



## BUILDING THE JET MODEL

## Number of radio samples
np.random.seed(15)
N = 30000



## Galaxy cluster halocentric radius

# scale-free radial scale
radius_bins = 500
s = np.logspace(-4, 1, base=10, num=radius_bins)
s_ = np.logspace(-4, 1, base=10, num=radius_bins)



## Physical constants

# speed of light
c_light = 3*10**8 # m s^-1
# newton's gravitational constant
G = 6.6743*10**(-11) # m^3 kg^-1 s^-2
# the bolztmann constant
kB = 1.3806*10**(-23) # m^2 kg s^-2 K^-1
# proton mass
mp = 1.6726*10**(-27) # kg



## Cosmological constants

# present-day critical density of the universe
def rho_crit(h):
    return 1.8788*10**(-26)*h**2 # kg m^-3

# hubble parameter
h = 0.6715

# density parameters
Omega_b = 0.0486
Omega_DM = 0.2589
f_b = Omega_b/(Omega_b + Omega_DM)



## Unit conversions

# solar mass
Msol = 1.989*10**30 # kg
# megayear
Myr = 3.156*10**13 # s
# gigayear
Gyr = 3.156*10**16 # s
# kiloparsec
kpc = 3.086*10**19 # m
# megaparsec
Mpc = 3.086*10**22 # m



## Parameters of galaxy clusters

# mean molecular weight
mu = 0.6
# adiabatic index
gamma = 5/3

# concentration parameter
c = 2.5
# dark matter inner logarithmic slope
a = 1
# fraction of cosmological baryon content
eta = 1
# dilution parameter
d = 1
# intracluster gas inner logarithmic slope
e = 0.5

# environmental parameters, in list form
environ_params = [c, a, d, e, eta]



## Virial parameters

# overdensity criterion
Delta = 500
# virial mass
Mvir = 10**14.5*Msol # kg
# virial radius
rvir = (3*Mvir/(4*np.pi*Delta*rho_crit(h)))**(1/3) # m
# virial temperature
Tvir = (1/3)*(mu*mp/kB)*G*Mvir/rvir # K
# virial pressure
pvir = (kB*Tvir/(mu*mp))*f_b*Delta*rho_crit(h) # Pa = kg m^-1 s^-2
# virial circular velocity
vcvir = (G*Mvir/rvir)**0.5 # m s^-1
print('the virial mass is: M500 = ' + str(Mvir/Msol) + ' Msol')
print('the virial radius is: r500 = ' + str(rvir/kpc) + ' kpc')
print('the virial temperature is: T500 = ' + str(Tvir) + ' K')
print('the virial pressure is: p500 = ' + str(pvir) + ' Pa')


## Stellar parameters

# stellar mass
Mstar = ((Mvir/Msol)*10**18.93)**(1/3.02)*Msol # kg
# stellar radius, 50%-light
Rstar_50 = 10**(0.126*(np.log10(Mstar/Msol) - 11) + 0.543)*kpc # m
# stellar radius, 90%-light
Rstar_90 = 10**(0.143*(np.log10(Mstar/Msol) - 11) + 0.955)*kpc # m
# choice in definition of stellar radius
Rstar = Rstar_90
# resolution radius
rres = 10**(-4)*rvir # m



## Parameters of AGN jets

# jet beam power constant
k1 = 1
# normalisation radius for jet evolution
s0 = 0.01
R0 = s0*rvir

# jet half-opening angle
thetaJ = 8.5*np.pi/180 # rads
# FR-I half-opening angle
thetaFRI = 15*np.pi/180 #rads

# jet solid angle
def Omega(thetaJ):
    return 2*np.pi*(1 - np.cos(thetaJ))
# FR-I solid angle
def Chi(thetaFRI):
    return 2*np.pi*(1 - np.cos(thetaFRI))

# duty cycle
duty = 0.1



## Galaxy cluster profiles

# parameterised functions

# halo concentration function
def u(c, a):
    return 1/(int.quad(lambda s: (s**(2-a))/((1+c*s)**(3-a)), 0, 1)[0])

# intracluster gas concentration
def C(c, a, d, e):
    return (d*(a - e) + c*(3 - e))/(3 - a)

# intracluster gas concentration function
def U(c, a, d, e):
    return 1/(int.quad(lambda s: (s**(2-e))/((1+C(c, a, d, e)*s)**(3-e)), 0, 1)[0])

# integral function
def integral_func(s, c, a, d, e, eta):
    return int.quad(lambda s_: (1/(s_**(2+e)*(1 + C(c, a, d, e)*s_)**(3-e)))*((1 - eta*f_b)*u(c, a)*int.quad(lambda s__: s__**(2-a)/((1 + c*s__)**(3-a)), 0, s_)[0] + eta*f_b*U(c, a, d, e)*int.quad(lambda s__: s__**(2-e)/((1 + C(c, a, d, e)*s__)**(3-e)), 0, s_)[0]), s, np.infty)[0]

# derivative of the integral function
def integral_func_deriv(s, c, a, d, e, eta):
    return - (1/(s**(2+e)*(1 + C(c, a, d, e)*s)**(3-e)))*((1 - eta*f_b)*u(c, a)*int.quad(lambda s_: s_**(2-a)/((1 + c*s_)**(3-a)), 0, s)[0] + eta*f_b*U(c, a, d, e)*int.quad(lambda s_: s_**(2-e)/((1 + C(c, a, d, e)*s_)**(3-e)), 0, s)[0])


# physical profiles of the intracluster gas

# intracluster gas density
def gas_density(s, c, a, d, e, eta): # kg m^-3
    return Delta*rho_crit(h)*eta*f_b*U(c, a, d, e)/(3*(s**e)*(1+C(c, a, d, e)*s)**(3-e))

# temperature (hydrostatic equilibrium, boundary = zero @ infinity)
def temperature(s, c, a, d, e, eta): # K
    return Tvir*3*s**e*(1 + C(c, a, d, e)*s)**(3-e)*integral_func(s, c, a, d, e, eta)

# pressure (hydrostatic equilibrium, boundary = zero @ infinity)
def eq_pressure(s, c, a, d, e, eta): # kg m^-1 s^-2 = Pa
    return pvir*eta*U(c, a, d, e)*integral_func(s, c, a, d, e, eta)

# pressure gradient (hydrostatic equilibrium, boundary = zero @ infinity)
def eq_pressure_deriv(s, c, a, d, e, eta): # kg m^-2 s^-2 = Pa m^-1
    return (pvir/rvir)*eta*U(c, a, d, e)*integral_func_deriv(s, c, a, d, e, eta)

# sound speed (hydrostatic equilibrium, boundary = zero @ infinity)
def sound_speed(s, c, a, d, e, eta): # m s^-1
    return vcvir*np.sqrt(gamma*s**e*(1 + C(c, a, d, e)*s)**(3-e)*integral_func(s, c, a, d, e, eta))

# intracluster gas number density
def number_density(s, c, a, d, e, eta): # m^-3
    return gas_density(s, c, a, d, e, eta)/(mu*mp)


# loading the intracluster gas profiles, given a choice in environmental parameters
gas_density_profile = np.empty(radius_bins)
temperature_profile = np.empty(radius_bins)
sound_speed_profile = np.empty(radius_bins)
th_pressure_profile = np.empty(radius_bins)
number_density_profile = np.empty(radius_bins)
for i in range(radius_bins):
    gas_density_profile[i] = gas_density(s[i], *environ_params)
    temperature_profile[i] = temperature(s[i], *environ_params)
    sound_speed_profile[i] = sound_speed(s[i], *environ_params)
    th_pressure_profile[i] = eq_pressure(s[i], *environ_params)
    number_density_profile[i] = number_density(s[i], *environ_params)
th_pressure_derivative = np.gradient(th_pressure_profile, np.multiply(rvir, s))



## Cooling function

abundance_file='mzero.cie' # metallicity for Sutherland & Dopita (1993) cooling function, here correpsonding to solar abundances

# interperlating from the gas temperature to the cooling function
logT_cool, logLambda_cool = read_ds_cooling(abundance_file) # T_cool in K, Lambda in funny units 13 dex higher than SI value
logLambda_cool_interp = np.interp(np.log10(temperature_profile), logT_cool, logLambda_cool-13) # log ( W m^3 )
Lambda_cool_interp = [10**i for i in logLambda_cool_interp] # W m^3

# cooling time
t_cool_profile = (3/2)*kB*np.divide(temperature_profile, np.multiply(Lambda_cool_interp, number_density_profile)) # s
# hydrogen number density
hydrogen_density_profile = np.multiply((4/9), number_density_profile) # m^-3
# cooling function
cooling_rate = np.multiply(np.multiply(hydrogen_density_profile, hydrogen_density_profile), Lambda_cool_interp) # W m^-3



## Population distributions

# normalisation coefficient for P = x^slope
def prob_normalisation(xmin, xmax, slope):
    if slope == -1:
        return 1/(np.log(xmax/xmin))
    else:
        return (slope+1)*(xmax**(slope+1) - xmin**(slope+1))**(-1)

# normalisation coefficient for P = x^slope1, P = x^slope2, with a cut-off at Qcut
def prob_normalisation_dual_slope(xmin, xmax, xcut, slope1, slope2):
    if slope1 == -1:
        A2 = (xcut**(slope2+1)*np.log(xcut/xmin) + (xmax**(slope2+1) - xcut**(slope2+1))/(1+slope2))**(-1)
        A1 = A2*(xcut**(slope2+1))
        return [A1, A2]
    else:
        A2 = (xcut**(slope2-slope1)*(xcut**(slope1+1) - xmin**(slope1+1))/(1+slope1) + (xmax**(slope2+1) - xcut**(slope2+1))/(1+slope2))**(-1)
        A1 = A2*(xcut**(slope2-slope1))
        return [A1, A2]

# inverse cumualtive probability distribution for P = x^slope
def inv_distribution(u, xmin, xmax, slope):
    if slope == -1:
        return (xmin*np.exp(u/prob_normalisation(xmin, xmax, slope)))
    else:
        return (xmin**(slope+1) + u*(slope+1)/prob_normalisation(xmin, xmax, slope))**(1/(slope+1))

# inverse cumulative probability distribution for P = x^slope1, P = x^slope2, with a cut-off at Qcut
def inv_distribution_dual_slope(u, xmin, xmax, xcut, slope1, slope2):
    A1 = prob_normalisation_dual_slope(xmin, xmax, xcut, slope1, slope2)[0]
    A2 = prob_normalisation_dual_slope(xmin, xmax, xcut, slope1, slope2)[1]
    output = np.empty(N)
    if slope1 == -1:
        for i in range(N):
            if u[i] <= A1*np.log(xcut/xmin):
                output[i] = (xmin * np.exp(u[i]/A1))
            elif u[i] > A1*np.log(xcut/xmin):
                output[i] = (xcut**(slope2+1) + ((slope2+1)/A2)*(u[i] - A1*np.log(xcut/xmin)))**(1/(slope2+1))
        return output
    else:
        for i in range(N):
            if u[i] <= (xcut**(slope1+1) - xmin**(slope1+1))*(A1/(slope1+1)):
                output[i] = (xmin**(slope1+1) + u[i]*(slope1+1)/A1)**(1/(slope1+1))
            elif u[i] > (xcut**(slope1+1) - xmin**(slope1+1))*(A1/(slope1+1)):
                output[i] = (xcut**(slope2+1) + u[i]*(slope2+1)/A2 - (A1*(slope1+1)/(A2*(slope2+1)))*(xcut**(slope1+1) - xmin**(slope1+1)))**(1/(slope2+1))
        return output

# inverse cumulative distribution for a uniform distribution
def inv_uniform_dist(u, xmin, xmax):
    return xmin + u*(xmax - xmin)

# power-law slope of source age distribution
sT = -1
# power-law slope of source power; low jet power regime
sQ1 = -1
# power-law slope of source power; high jet power regime
sQ2 = -1.5
# jet parameters, in list form
jet_params = [thetaJ, thetaFRI]
source_pop_params = [duty, sQ1, sQ2, sT]



## Time offset for the jet to leave central galaxy

# time offset as a function of jet power, calibrated from Bicknell+2018
def t_min(Q, e): # s
    return 1.27*Myr*(4/(4-e))*((3-e)/3)**0.5*(10**37/Q)**0.5



## Sampling the jet power distribution

# random real numbers on the interval [0, 1]
u_vals = np.random.rand(N)

# maximum jet power
Qmax = 10**40 # W
log_Qmax = 40
# minimum jet power, calibrated from Young+ in prep
Qmin = 10**37*(1.27*Myr/Gyr)**2*(4/(4-e))**2*((3-e)/3) # W
log_Qmin = np.log10(Qmin)

## CHOICE REQUIRED: sampling the jet power distribution

# sampling by a dual power-law probability distribution:
Qcut = 10**38 # W
raw_Qjet_samples = inv_distribution_dual_slope(u_vals, Qmin, Qmax, Qcut, sQ1, sQ2)

# histogram for jet powers
Qjet_bins = np.logspace(log_Qmin, log_Qmax, base=10, num=14)
raw_Qjet_hist, _ = np.histogram(raw_Qjet_samples, bins=Qjet_bins)



## Sampling the source age distribution

# random real numbers on the interval [0, 1]
u_vals = np.random.rand(N)

# minimum source age
tmin = 1*Myr # s
log_tmin = np.log10(tmin/Myr)
# maximum source age
tmax = 1*Gyr # s
log_tmax = np.log10(tmax/Myr)

# sampling source ages by their distribution:
raw_age_samples = inv_distribution(u_vals, tmin, tmax, sT)
raw_age_samples_Myr = np.divide(raw_age_samples, Myr)

# histogram for source ages
age_bins = np.logspace(log_tmin, log_tmax, base=10, num=14)
raw_age_hist, _ = np.histogram(raw_age_samples_Myr, bins=age_bins)


# Removing jets that cannot escape the central galaxy

# time on, subtracting minimum time
ton_samples = np.empty(N)
tesc_samples = np.empty(N)
stuck_jet_indices = np.empty(N)
for i in range(N):
    if raw_age_samples[i] > t_min(raw_Qjet_samples[i], e):
        stuck_jet_indices[i] = np.nan
        tesc_samples[i] = t_min(raw_Qjet_samples[i], e)
        ton_samples[i] = raw_age_samples[i] - t_min(raw_Qjet_samples[i], e)
    elif raw_age_samples[i] <= t_min(raw_Qjet_samples[i], e):
        stuck_jet_indices[i] = i
        tesc_samples[i] = np.nan
        ton_samples[i] = np.nan
tesc_samples = tesc_samples[~np.isnan(tesc_samples)]
ton_samples = ton_samples[~np.isnan(ton_samples)]
stuck_jet_indices = stuck_jet_indices[~np.isnan(stuck_jet_indices)]

# number and fraction of jets that escape the central galaxy
N_prime = len(ton_samples)
escape_numbers = [N_prime, N-N_prime]
escape_fractions = np.round(np.multiply(100, [N_prime/N, (N-N_prime)/N]), decimals=2)
print(str(N_prime) + ' jets escape from the galaxy')
print(str(N-N_prime) + ' jets do not escape from the galaxy')

# updating jet powers and source ages to remove stuck jets
Qjet_samples = [i for j, i in enumerate(raw_Qjet_samples) if j not in stuck_jet_indices]
log_Qjet_samples = [np.log10(i) for i in Qjet_samples]
age_samples = [i for j, i in enumerate(raw_age_samples) if j not in stuck_jet_indices]

# conversion to astrophysical units
age_samples_Myr = np.divide(age_samples, Myr)
tesc_samples_Myr = np.divide(tesc_samples, Myr)
ton_samples_Myr = np.divide(ton_samples, Myr)

# histograms for jet on-times
ton_bins = np.logspace(np.log10(min(ton_samples_Myr)), np.log10(max(ton_samples_Myr)), base=10, num=14)
ton_hist, _ = np.histogram(ton_samples_Myr, bins=ton_bins)
# updating histograms for jet powers and source ages, with stuck jets removed
Qjet_hist, _ = np.histogram(Qjet_samples, bins=Qjet_bins)
age_hist, _ = np.histogram(age_samples_Myr, bins=age_bins)



## Jet evolution model

# 'jet lobe' phase:

# jet length during 'jet lobe phase'
def R_jet_phase(t, Q, thetaJ, s0, c, a, d, e, eta): # m
    return ((4-e)*t/2)**(2/(4-e))*(k1*Q/(Omega(thetaJ)*c_light*gas_density(s0, c, a, d, e, eta)*R0**e))**(1/(4-e))


# solving pressure equilibrium:

# time at pressure equilibrium
def t_eq(Q, thetaJ, s0, c, a, d, e, eta): # s
    return (2/(4-e))*(k1*Q/(Omega(thetaJ)*c_light))**((2-e)/4)*(gas_density(s0, c, a, d, e, eta)*R0**e)**(1/2)/((eq_pressure(s0, c, a, d, e, eta))**((4-e)/4))

# jet length at pressure equilibrium
def R_eq(Q, thetaJ, s0, c, a, d, e, eta): # m
    return (k1*Q/(Omega(thetaJ)*c_light*eq_pressure(s0, c, a, d, e, eta)))**(1/2)

# jet length offset from 'flaring jet phase' up to pressure equilibrium
def x_eq(Q, thetaJ, thetaFRI, s0, c, a, d, e, eta):
    return R_eq(Q, thetaJ, s0, c, a, d, e, eta)*np.tan(thetaJ)/np.tan(thetaFRI) # m


# 'flaring jet' phase:

# flaring jet time offset
def t_fj(Q, thetaJ, thetaFRI, s0, c, a, d, e, eta): # s
    return (1/2)*((4-e)/(3-e))*(x_eq(Q, thetaJ, thetaFRI, s0, c, a, d, e, eta)/R_eq(Q, thetaJ, s0, c, a, d, e, eta))*t_eq(Q, thetaJ, s0, c, a, d, e, eta)

# jet length during 'flaring jet phase'
def R_fj_phase(t, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta): # m
    return R_eq(Q, thetaJ, s0, c, a, d, e, eta) - x_eq(Q, thetaJ, thetaFRI, s0, c, a, d, e, eta) + x_eq(Q, thetaJ, thetaFRI, s0, c, a, d, e, eta)*((t - t_eq(Q, thetaJ, s0, c, a, d, e, eta) + t_fj(Q, thetaJ, thetaFRI, s0, c, a, d, e, eta))/t_fj(Q, thetaJ, thetaFRI, s0, c, a, d, e, eta))**(1/(3-e))


# the jet's solid angle and filling factor:

# radius of jet cone
def y_jet(R, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta): # m
    return (R - R_eq(Q, thetaJ, s0, c, a, d, e, eta) + x_eq(Q, thetaJ, thetaFRI, s0, c, a, d, e, eta))*np.tan(thetaFRI)

# solid angle of 'flaring jet phase' half-opening angle
def Phi(R, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta):
    return 2*np.pi*(1 - R/np.sqrt(R**2 + y_jet(R, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta)**2))

# filling factor during 'flaring jet phase'; two cones of solid angle phi
def filling_factor(R, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta):
    return 1 - R/np.sqrt(R**2 + y_jet(R, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta)**2)

# half-opening angle during 'flaring jet phase'
def half_opening_angle(R, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta):
    return np.arccos(R/np.sqrt(R**2 + y_jet(R, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta)**2))

# volume occupied by filling factor, assuming a conical volume
def jet_filling_vol(Rjet, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta):
    if Rjet <= R_eq(Q, thetaJ, s0, c, a, d, e, eta):
        return 2*np.pi*(1 - np.cos(thetaJ))*R_eq(Q, thetaJ, s0, c, a, d, e, eta)**3/3
    if Rjet > R_eq(Q, thetaJ, s0, c, a, d, e, eta):
        R = np.logspace(-3, np.log10(Rjet), base=10, num=150)
        return 2*np.pi*(1 - np.cos(thetaJ))*R_eq(Q, thetaJ, s0, c, a, d, e, eta)**3/3 + 2*np.pi*int.quad(lambda R: R**2*filling_factor(R, Q, thetaJ, thetaFRI, s0, c, a, d, e, eta), R_eq(Q, thetaJ, s0, c, a, d, e, eta), Rjet)[0]



## Sampling the jet evolution model

# appending the jet length, equilibrium time, flaring jet offset time and jet length at pressure equilibrium
teq_samples = np.empty(N_prime)
tfj_samples = np.empty(N_prime)
Req_samples = np.empty(N_prime)
Rjet_samples = np.empty(N_prime)
does_not_flare_indices = np.empty(N_prime)
for i in range(N_prime):
    teq_samples[i] = t_eq(Qjet_samples[i], thetaJ, s0, *environ_params)
    tfj_samples[i] = t_fj(Qjet_samples[i], thetaJ, thetaFRI, s0, *environ_params)
    if ton_samples[i] > teq_samples[i]:
        does_not_flare_indices[i] = np.nan
        Rjet_samples[i] = R_fj_phase(ton_samples[i], Qjet_samples[i], thetaJ, thetaFRI, s0, *environ_params)
        Req_samples[i] = R_eq(Qjet_samples[i], thetaJ, s0, *environ_params)
    elif ton_samples[i] <= teq_samples[i]:
        does_not_flare_indices[i] = i
        Rjet_samples[i] = R_jet_phase(ton_samples[i], Qjet_samples[i], thetaJ, s0, *environ_params)
        Req_samples[i] = np.nan
does_not_flare_indices = does_not_flare_indices[~np.isnan(does_not_flare_indices)]

# appending the filling factor, half-opening angle and scaled halo radius
filling_factor_samples = np.empty((N_prime, 150))
half_angle_samples = np.empty((N_prime, 150))
scaled_halo_radii_samples = np.empty((N_prime, 150))
for i in range(N_prime):
    if ton_samples[i] > teq_samples[i]:
        Rjet_halo_radii = np.logspace(np.log10(rres), np.log10(Rjet_samples[i]), base=10, num=150)
        jet_phase_steps = round(150*(np.log10(Req_samples[i]) + np.log10(rres))/(np.log10(Rjet_samples[i]) + np.log10(rres)))
        flaring_jet_phase_steps = round(150*(np.log10(Rjet_samples[i]) - np.log10(Req_samples[i]))/(np.log10(Rjet_samples[i]) + np.log10(rres)))
        jet_phase_radii = np.logspace(np.log10(rres), np.log10(Req_samples[i]), base=10, num=jet_phase_steps)
        flaring_jet_phase_radii = np.logspace(np.log10(Req_samples[i]), np.log10(Rjet_samples[i]), base=10, num=flaring_jet_phase_steps)
        scaled_halo_radii_samples[i] = np.divide(Rjet_halo_radii, rvir)

        jet_phase_filling_factor = [1 - np.cos(thetaJ)]*jet_phase_steps
        flaring_jet_phase_filling_factor = filling_factor(flaring_jet_phase_radii, Qjet_samples[i], thetaJ, thetaFRI, s0, *environ_params)
        jet_phase_half_angle = [thetaJ]*jet_phase_steps
        flaring_jet_half_angle = half_opening_angle(flaring_jet_phase_radii, Qjet_samples[i], thetaJ, thetaFRI, s0, *environ_params)

        filling_factor_samples[i] = [*jet_phase_filling_factor, *flaring_jet_phase_filling_factor]
        half_angle_samples[i] = [*jet_phase_half_angle, *flaring_jet_half_angle]
    elif ton_samples[i] <= teq_samples[i]:
        Rjet_halo_radii = np.logspace(np.log10(rres), np.log10(Rjet_samples[i]), base=10, num=150)
        scaled_halo_radii_samples[i] = np.divide(Rjet_halo_radii, rvir)

        filling_factor_samples[i] = [1 - np.cos(thetaJ)]*150
        half_angle_samples[i] = [thetaJ]*150

# number and fraction of jet sources that flare
N_flare = N_prime - len(does_not_flare_indices)
flaring_numbers = [N_flare, N_prime-N_flare]
flaring_fractions = np.round(np.multiply(100, [N_flare/N_prime, (N_prime-N_flare)/N_prime]), decimals=2)
print(str(N_flare) + ' jets reach pressure equilibrium and flare')
print(str(N_prime-N_flare) + ' jets never flare')

# jet lengths of sources that do not flare
Rjet_samples_no_flare = [i for j, i in enumerate(Rjet_samples) if j in does_not_flare_indices]

# conversion to astrophysical units
teq_samples_Myr = np.divide(teq_samples, Myr)
tfj_samples_Myr = np.divide(tfj_samples, Myr)
Req_samples_kpc = np.divide(Req_samples, kpc)
Rjet_samples_kpc = np.divide(Rjet_samples, kpc)
Rjet_samples_no_flare_kpc = np.divide(Rjet_samples_no_flare, kpc)
print('the largest jet reaches: ' + str(max(Rjet_samples_kpc)) + 'kpc')

# histograms for jet lengths and equilibrium jet lengths
Rjet_bins = np.logspace(np.log10(min(Req_samples_kpc)), np.log10(max(Rjet_samples_kpc)), base=10, num=12)
Rjet_hist, _ = np.histogram(Rjet_samples_kpc, bins=Rjet_bins)
Req_hist, _ = np.histogram(Req_samples_kpc, bins=Rjet_bins)
Rjet_no_flare_hist, _ = np.histogram(Rjet_samples_no_flare_kpc, bins=Rjet_bins)



## PLOTTING

## Plot showing the predictions of the jet heating model

# - jet power distribution
# - source age distribution
# - fraction of sources that escape the central galaxy
# - jet length at pressure equilibrium
# - fraction of sources that flare
# - final jet lengths

fig = plt.figure(figsize=[15, 15])
gs = gridspec.GridSpec(4, 3)

plt0 = plt.subplot(gs[0])
plt0.bar(Qjet_bins[:-1], raw_Qjet_hist, width=np.diff(Qjet_bins), alpha=1, color='rebeccapurple', edgecolor='black', align='edge', label='Sampled population')
plt0.bar(Qjet_bins[:-1], Qjet_hist, width=np.diff(Qjet_bins), alpha=1, color='slateblue', edgecolor='black', align='edge', label='Sources that escape the galaxy')
plt0.set_xscale('log')
plt0.set_xlabel('$Q_\\mathrm{jet} \\quad [\\mathrm{W}]$', fontsize = 18)
plt0.set_ylabel('Number of sources', fontsize = 18)
plt0.set_ylim(0, N/5)
plt0.legend()

plt1 = plt.subplot(gs[1])
plt1.bar(age_bins[:-1], raw_age_hist, width=np.diff(age_bins), alpha=1, color='rebeccapurple', edgecolor='black', align='edge', label='Sampled population')
plt1.bar(age_bins[:-1], age_hist, width=np.diff(age_bins), alpha=1, color='slateblue', edgecolor='black', align='edge', label='Sources that escape the galaxy')
plt1.set_xscale('log')
plt1.set_xlabel('$t_\\mathrm{age} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt1.set_ylabel('Number of sources', fontsize = 18)
plt1.set_ylim(0, N/5)
plt1.legend()

plt2 = plt.subplot(gs[2])
bar = plt2.bar(['Escapes the galaxy', 'Does not escape the galaxy'], escape_numbers, color=['slateblue', 'rebeccapurple'])
plt2.set_ylabel('Number of sources', fontsize = 18)
plt2.set_ylim(0, N)
ax2_2 = plt2.twinx()
ax2_2.set_ylim(0, 100)
ax2_2.set_ylabel('Percentage (%)', fontsize = 18)
for bar, percentage in zip(bar, escape_fractions):
    ax2_2.text(bar.get_x() + bar.get_width() / 2, percentage+10, f'{percentage}%', c='black', ha='center', va='top', fontsize=18)

plt3 = plt.subplot(gs[3])
sc3 = plt3.scatter(ton_samples_Myr, tesc_samples_Myr, alpha=1, c=log_Qjet_samples, cmap='plasma')
plt3.set_xlabel('$t_\\mathrm{on} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt3.set_ylabel('$t_\\mathrm{esc} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt3.set_xscale('log')
plt3.set_yscale('log')
cbar3 = fig.colorbar(sc3, ax=plt3)
cbar3.set_label('$\\log_{10} Q_\\mathrm{jet}$', fontsize=18)

plt4 = plt.subplot(gs[4])
plt4.bar(ton_bins[:-1], ton_hist, width=np.diff(ton_bins), alpha=1, color='slateblue', edgecolor='black', align='edge', label='Sources that escape the galaxy')
plt4.set_xscale('log')
plt4.set_xlabel('$t_\\mathrm{on} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt4.set_ylabel('Number of sources', fontsize = 18)
plt4.set_ylim(0, N/5)

plt5 = plt.subplot(gs[5])
bar = plt5.bar(['Reaches pressure equilibrium\nand flares', 'Does not flare'], flaring_numbers, color=['mediumvioletred', 'plum'])
plt5.set_ylabel('Number of sources', fontsize = 18)
plt5.set_ylim(0, N_prime)
ax5_2 = plt5.twinx()
ax5_2.set_ylim(0, 100)
ax5_2.set_ylabel('Percentage (%)', fontsize = 18)
for bar, percentage in zip(bar, flaring_fractions):
    ax5_2.text(bar.get_x() + bar.get_width() / 2, percentage+10, f'{percentage}%', c='black', ha='center', va='top', fontsize=18)

plt6 = plt.subplot(gs[6])
sc6 = plt6.scatter(ton_samples_Myr, teq_samples_Myr, alpha=1, c=log_Qjet_samples, cmap='plasma')
plt6.set_xlabel('$t_\\mathrm{on} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt6.set_ylabel('$t_\\mathrm{eq} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt6.set_xscale('log')
plt6.set_yscale('log')
cbar6 = fig.colorbar(sc6, ax=plt6)
cbar6.set_label('$\\log_{10} Q_\\mathrm{jet}$', fontsize=18)

plt7 = plt.subplot(gs[7])
plt7.bar(Rjet_bins[:-1], Req_hist, width=np.diff(Rjet_bins), alpha=1, color='mediumvioletred', edgecolor='black', align='edge', label='Sources that escape the galaxy and flare')
plt7.set_xscale('log')
plt7.set_xlim(min(Req_samples_kpc), max(Rjet_samples_kpc))
plt7.set_xlabel('$R_\\mathrm{eq} \\quad [\\mathrm{kpc}]$', fontsize = 18)
plt7.set_ylabel('Number of sources', fontsize = 18)
plt7.set_ylim(0, N/5)

plt8 = plt.subplot(gs[8])
sc8 = plt8.scatter(ton_samples_Myr, tfj_samples_Myr, alpha=1, c=log_Qjet_samples, cmap='plasma')
plt8.set_xlabel('$t_\\mathrm{on} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt8.set_ylabel('$\\Delta t_\\mathrm{fj} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt8.set_xscale('log')
plt8.set_yscale('log')
cbar8 = fig.colorbar(sc8, ax=plt8)
cbar8.set_label('$\\log_{10} Q_\\mathrm{jet}$', fontsize=18)

plt9 = plt.subplot(gs[9])
plt9.bar(Rjet_bins[:-1], Rjet_hist, width=np.diff(Rjet_bins), alpha=1, color='slateblue', edgecolor='black', align='edge', label='Sources that escape the galaxy')
plt9.bar(Rjet_bins[:-1], Rjet_no_flare_hist, width=np.diff(Rjet_bins), alpha=1, color='plum', edgecolor='black', align='edge', label='Sources that escape but never flare')
plt9.set_xscale('log')
plt9.set_xlim(min(Req_samples_kpc), max(Rjet_samples_kpc))
plt9.set_xlabel('$R_\\mathrm{jet} \\quad [\\mathrm{kpc}]$', fontsize = 18)
plt9.set_ylabel('Number of sources', fontsize = 18)
plt9.set_ylim(0, N/5)
plt9.legend()

plt10 = plt.subplot(gs[10])
sc10 = plt10.scatter(ton_samples_Myr, Rjet_samples_kpc, alpha=1, c=log_Qjet_samples, cmap='plasma')
plt10.set_xscale('log')
plt10.set_ylim(0.5*0.1, 400)
plt10.set_xlabel('$t_\\mathrm{on} \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt10.set_ylabel('$R_\\mathrm{jet} \\quad [\\mathrm{kpc}]$', fontsize = 18)
plt10.set_yscale('log')
cbar10 = fig.colorbar(sc10, ax=plt10)
cbar10.set_label('$\\log_{10} Q_\\mathrm{jet}$', fontsize=18)

norm = mcolors.Normalize(vmin=min(log_Qjet_samples), vmax=max(log_Qjet_samples))
cmap = cm.plasma
plt11 = plt.subplot(gs[11])
# tracing a subsample of evolutionary trajectories
subsample = 30
time_resolution = 100
radial_evolution = np.empty((subsample, time_resolution))
for i in range(subsample):
    time_steps = np.logspace(-1, np.log10(ton_samples_Myr[i]), base=10, num=time_resolution)
    for j in range(time_resolution):
        if time_steps[j] <= teq_samples_Myr[i]:
            radial_evolution[i, j] = R_jet_phase(time_steps[j]*Myr, Qjet_samples[i], thetaJ, s0, *environ_params)/kpc
        elif time_steps[j] > teq_samples_Myr[i]:
            radial_evolution[i, j] = R_fj_phase(time_steps[j]*Myr, Qjet_samples[i], thetaJ, thetaFRI, s0, *environ_params)/kpc
    color = cmap(norm(log_Qjet_samples[i]))
    plt11.plot(time_steps, radial_evolution[i], zorder=-1, color=color)
    plt11.scatter(ton_samples_Myr[i], Rjet_samples_kpc[i], s=7, color='red')
    if i not in does_not_flare_indices:
        plt11.scatter(teq_samples_Myr[i], Req_samples_kpc[i], s=7, color='black')
sm = cm.ScalarMappable(cmap=cmap, norm=norm)
sm.set_array([])
cbar = fig.colorbar(sm, ax=plt11)
cbar.set_label('$\\log_{10} Q_\\mathrm{jet}$', fontsize=18)
plt11.set_xscale('log')
plt11.set_xlabel('$t \\quad [\\mathrm{Myr}]$', fontsize = 18)
plt11.set_xlim(0.2, 1500)
plt11.set_yscale('log')
plt11.set_ylim(0.5*0.1, 400)
plt11.set_ylabel('$R \\quad [\\mathrm{kpc}]$', fontsize = 18)
plt11.scatter(10**(-10), 10**(-10), s=7, color='black', label='$(t_\\mathrm{eq}, \,\, R_\\mathrm{eq})$')
plt11.scatter(10**(-10), 10**(-10), s=7, color='red', label='$(t_\\mathrm{on}, \,\, R_\\mathrm{jet})$')
plt11.legend(loc=4)

plt.subplots_adjust(hspace=.25, wspace=.3)
fig.add_subplot(111, frame_on=False)
plt.tick_params(labelcolor='none', top=False, bottom=False, left=False, right=False)

plt.savefig('histograms_M14_5_c25_NFW_d1_e05_thetaJ85_thetaFRI15_sQ1_2.png', dpi=250, bbox_inches='tight')
print('Fig 1 saved')
#plt.show()



## Calculating the heating rates and the heating velocity kicks

# creating a common set of radius values
common_scaled_radii = np.logspace(np.log10(min(np.concatenate(scaled_halo_radii_samples))), np.log10(max(np.concatenate(scaled_halo_radii_samples))), base=10, num=150)
# creating a scaled radius for the cooling-only regime
cooling_only_scaled_radii = np.logspace(np.log10(max(common_scaled_radii)), 1, base=10, num=50)
# total radius = heating subjected region + cooling-only region
tot_common_scaled_radii = np.array([*common_scaled_radii, *cooling_only_scaled_radii[1:]])
cluster_radius_steps = len(tot_common_scaled_radii)

# gas velocity kicks per energy injection rate
velocity_per_volumetric_energy_rate = np.divide((gamma-1), (np.add(th_pressure_derivative, np.multiply(2*gamma, np.divide(th_pressure_profile, rvir*s)))))

# calculating the volumetric heating rates and the heating-induced gas velocity kicks
duty01_heating_rate_samples = np.empty(N_prime)
duty02_heating_rate_samples = np.empty(N_prime)
duty03_heating_rate_samples = np.empty(N_prime)
duty01_heating_velocity_kick_samples = np.empty((N_prime, radius_bins))
duty02_heating_velocity_kick_samples = np.empty((N_prime, radius_bins))
duty03_heating_velocity_kick_samples = np.empty((N_prime, radius_bins))
for i in range(N_prime):
    Rjet_conical_volume = jet_filling_vol(Rjet_samples[i], Qjet_samples[i], thetaJ, thetaFRI, s0, *environ_params)
    heat_vals_samples = Qjet_samples[i]/Rjet_conical_volume
    duty01_heating_rate_samples[i] = 0.1*heat_vals_samples
    duty02_heating_rate_samples[i] = 0.2*heat_vals_samples
    duty03_heating_rate_samples[i] = 0.3*heat_vals_samples
    duty01_heating_velocity_kick_samples[i] = 0.1*heat_vals_samples*velocity_per_volumetric_energy_rate
    duty02_heating_velocity_kick_samples[i] = 0.2*heat_vals_samples*velocity_per_volumetric_energy_rate
    duty03_heating_velocity_kick_samples[i] = 0.3*heat_vals_samples*velocity_per_volumetric_energy_rate

# calculating the cooling-induced gas velocity kick
cooling_velocity_kicks_samples = cooling_rate*velocity_per_volumetric_energy_rate

# interpolating the filling factor
interpolated_filling_factor = np.zeros((N_prime, radius_bins))
for i, subarray in enumerate(filling_factor_samples):
    interpolator = interp1d(scaled_halo_radii_samples[i], subarray, kind='linear', bounds_error=False)
    interpolated_filling_factor[i] = interpolator(s)
interpolated_filling_factor[np.isnan(interpolated_filling_factor)] = 0

# calculating the effective gas velocity kicks and the effective volumetric energy injection rates
duty01_effective_velocity_kick_samples = np.empty((N_prime, radius_bins))
duty02_effective_velocity_kick_samples = np.empty((N_prime, radius_bins))
duty03_effective_velocity_kick_samples = np.empty((N_prime, radius_bins))
duty01_effective_energy_injection_samples = np.empty((N_prime, radius_bins))
duty02_effective_energy_injection_samples = np.empty((N_prime, radius_bins))
duty03_effective_energy_injection_samples = np.empty((N_prime, radius_bins))
for i in range(N_prime):
    duty01_effective_velocity_kick_samples[i] = np.sqrt(np.add(np.multiply(interpolated_filling_factor[i], np.square(duty01_heating_velocity_kick_samples[i])), np.multiply(np.subtract(1, interpolated_filling_factor[i]), np.square(cooling_velocity_kicks_samples))))
    duty02_effective_velocity_kick_samples[i] = np.sqrt(np.add(np.multiply(interpolated_filling_factor[i], np.square(duty02_heating_velocity_kick_samples[i])), np.multiply(np.subtract(1, interpolated_filling_factor[i]), np.square(cooling_velocity_kicks_samples))))
    duty03_effective_velocity_kick_samples[i] = np.sqrt(np.add(np.multiply(interpolated_filling_factor[i], np.square(duty03_heating_velocity_kick_samples[i])), np.multiply(np.subtract(1, interpolated_filling_factor[i]), np.square(cooling_velocity_kicks_samples))))
    duty01_effective_energy_injection_samples[i] = np.sqrt(np.add(np.multiply(interpolated_filling_factor[i], np.square(duty01_heating_rate_samples[i])), np.multiply(np.subtract(1, interpolated_filling_factor[i]), np.square(cooling_rate))))
    duty02_effective_energy_injection_samples[i] = np.sqrt(np.add(np.multiply(interpolated_filling_factor[i], np.square(duty02_heating_rate_samples[i])), np.multiply(np.subtract(1, interpolated_filling_factor[i]), np.square(cooling_rate))))
    duty03_effective_energy_injection_samples[i] = np.sqrt(np.add(np.multiply(interpolated_filling_factor[i], np.square(duty03_heating_rate_samples[i])), np.multiply(np.subtract(1, interpolated_filling_factor[i]), np.square(cooling_rate))))
# calculating the mean effective gas velocity kicks
duty01_mean_effective_velocity = np.mean(duty01_effective_velocity_kick_samples, axis=0)
duty02_mean_effective_velocity = np.mean(duty02_effective_velocity_kick_samples, axis=0)
duty03_mean_effective_velocity = np.mean(duty03_effective_velocity_kick_samples, axis=0)
# calculating the mean effective volumetric energy injection rates
duty01_mean_effective_energy_injection = np.mean(duty01_effective_energy_injection_samples, axis=0)
duty02_mean_effective_energy_injection = np.mean(duty02_effective_energy_injection_samples, axis=0)
duty03_mean_effective_energy_injection = np.mean(duty03_effective_energy_injection_samples, axis=0)

# converting velocities to km s^-1
sound_speed_profile_kms = np.divide(sound_speed_profile, 10**3)
duty01_effective_velocity_kms = np.divide(duty01_effective_velocity_kick_samples, 10**3)
duty02_effective_velocity_kms = np.divide(duty02_effective_velocity_kick_samples, 10**3)
duty03_effective_velocity_kms = np.divide(duty03_effective_velocity_kick_samples, 10**3)
duty01_mean_effective_velocity_kms = np.divide(duty01_mean_effective_velocity, 10**3)
duty02_mean_effective_velocity_kms = np.divide(duty02_mean_effective_velocity, 10**3)
duty03_mean_effective_velocity_kms = np.divide(duty03_mean_effective_velocity, 10**3)



## Calculating the non-thermal pressure (NTP)

# NTP as the kinetic to total energy density ratio for each source
duty01_NTP_samples = np.empty((N_prime, radius_bins))
duty02_NTP_samples = np.empty((N_prime, radius_bins))
duty03_NTP_samples = np.empty((N_prime, radius_bins))
for i in range(N_prime):
    duty01_NTP_samples[i] = np.divide(1, np.add(1, (3*kB/(mu*mp))*np.divide(temperature_profile, np.square(duty01_effective_velocity_kick_samples[i]))))
    duty02_NTP_samples[i] = np.divide(1, np.add(1, (3*kB/(mu*mp))*np.divide(temperature_profile, np.square(duty02_effective_velocity_kick_samples[i]))))
    duty03_NTP_samples[i] = np.divide(1, np.add(1, (3*kB/(mu*mp))*np.divide(temperature_profile, np.square(duty03_effective_velocity_kick_samples[i]))))
# calculating the mean NTP profiles
duty01_mean_NTP = np.mean(duty01_NTP_samples, axis=0)
duty02_mean_NTP = np.mean(duty02_NTP_samples, axis=0)
duty03_mean_NTP = np.mean(duty03_NTP_samples, axis=0)



## PLOTTING

## Plot showing the predictions of the jet heating model

# - cooling function
# - heating function
# - heating -- cooling difference
# - velocity kick
# - Mach number
# - non-thermal pressure

subsample = 100
fig = plt.figure(figsize=[15, 4])
gs = gridspec.GridSpec(1, 3)

plt0 = plt.subplot(gs[0])
for i in range(subsample):
    plt0.plot(s, duty01_effective_velocity_kms[i], color='skyblue', alpha=0.03)
    plt0.plot(s, duty02_effective_velocity_kms[i], color='blue', alpha=0.03)
    plt0.plot(s, duty02_effective_velocity_kms[i], color='blueviolet', alpha=0.03)
plt0.plot(s, duty01_mean_effective_velocity_kms, color='skyblue', linewidth=2.8, label='$\\left< v_\\mathrm{eff} \\right>$, when $\\delta=0.1$', ls='-')
plt0.plot(s, duty02_mean_effective_velocity_kms, color='blue', linewidth=2.8, label='$\\left< v_\\mathrm{eff} \\right>$, when $\\delta=0.2$', ls='-')
plt0.plot(s, duty03_mean_effective_velocity_kms, color='blueviolet', linewidth=2.8, label='$\\left< v_\\mathrm{eff} \\right>$, when $\\delta=0.3$', ls='-')
plt0.plot(s, sound_speed_profile_kms, color='black', ls=':', linewidth=2.5, label='Sound speed, $c_\\mathrm{s}$')
plt0.set_xscale('log')
plt0.set_xlim(0.5*10**(-2), 0.5*10**(0))
plt0.set_xlabel('$r/r_{500}$', fontsize = 18)
plt0.set_yscale('log')
plt0.set_ylim(0.5*10**(0), 0.5*10**6)
plt0.set_ylabel('$v_\\mathrm{eff} \quad [\\mathrm{km s^{-1}}]$', fontsize = 18)
plt0.legend(loc=2)

plt1 = plt.subplot(gs[1])
for i in range(subsample):
    plt1.plot(s, duty01_effective_energy_injection_samples[i], color='skyblue', alpha=0.03)
    plt1.plot(s, duty02_effective_energy_injection_samples[i], color='blue', alpha=0.03)
    plt1.plot(s, duty03_effective_energy_injection_samples[i], color='blueviolet', alpha=0.03)
plt1.plot(s, duty01_mean_effective_energy_injection, color='skyblue', linewidth=2.8, label='$\\left< \\mathcal{Q}_\\mathrm{eff} \\right>$, when $\\delta=0.1$', ls='-')
plt1.plot(s, duty02_mean_effective_energy_injection, color='blue', linewidth=2.8, label='$\\left< \\mathcal{Q}_\\mathrm{eff} \\right>$, when $\\delta=0.2$', ls='-')
plt1.plot(s, duty03_mean_effective_energy_injection, color='blueviolet', linewidth=2.8, label='$\\left< \\mathcal{Q}_\\mathrm{eff} \\right>$, when $\\delta=0.3$', ls='-')
plt1.set_xscale('log')
plt1.set_xlim(0.5*10**(-2), 0.5*10**(0))
plt1.set_xlabel('$r/r_{500}$', fontsize = 18)
plt1.set_yscale('log')
plt1.set_ylim(10**(-33), 10**(-18))
plt1.legend(loc=1)
plt1.set_ylabel('$\\mathcal{Q}_\\mathrm{eff} \quad [\\mathrm{Wm^{-3}}]$', fontsize = 18)

plt2 = plt.subplot(gs[2])
for i in range(subsample):
    plt2.plot(s, duty01_NTP_samples[i], color='skyblue', alpha=0.03)
    plt2.plot(s, duty02_NTP_samples[i], color='blue', alpha=0.03)
    plt2.plot(s, duty03_NTP_samples[i], color='blueviolet', alpha=0.03)
plt2.plot(s, duty01_mean_NTP, color='skyblue', linewidth=2.8, label='$\\left< \\mathcal{F} \\right>$, when $\\delta=0.1$', ls='-')
plt2.plot(s, duty02_mean_NTP, color='blue', linewidth=2.8, label='$\\left< \\mathcal{F} \\right>$, when $\\delta=0.2$', ls='-')
plt2.plot(s, duty03_mean_NTP, color='blueviolet', linewidth=2.8, label='$\\left< \\mathcal{F} \\right>$, when $\\delta=0.3$', ls='-')
plt2.set_xscale('log')
plt2.set_xlim(0.5*10**(-2), 0.5*10**(0))
plt2.set_xlabel('$r/r_{500}$', fontsize = 18)
plt2.set_ylim(-0.03, 0.34)
plt2.set_yticks([0, 0.1, 0.2, 0.3])
plt2.set_ylabel('$\\mathcal{F} \\equiv p_\\mathrm{nt}/p$', fontsize = 18)
plt2.legend(loc=1)

plt.subplots_adjust(hspace=.25, wspace=.3)
fig.add_subplot(111, frame_on=False)
plt.tick_params(labelcolor='none', top=False, bottom=False, left=False, right=False)

plt.savefig('M14_5_c25_NFW_d1_e05_thetaJ85_thetaFRI15_sQ1_2.png', dpi=350, bbox_inches='tight')
print('Fig 2 saved')
#plt.show()
